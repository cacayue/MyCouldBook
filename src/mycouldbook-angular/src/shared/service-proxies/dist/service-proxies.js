"use strict";
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.__esModule = true;
exports.ApiException = exports.UserDtoPagedResultDto = exports.ResetPasswordDto = exports.ChangePasswordDto = exports.ChangeUserLanguageDto = exports.RoleDtoListResultDto = exports.UserDto = exports.CreateUserDto = exports.ExternalAuthenticateResultModel = exports.ExternalAuthenticateModel = exports.ExternalLoginProviderInfoModel = exports.AuthenticateResultModel = exports.AuthenticateModel = exports.TenantDtoPagedResultDto = exports.TenantDto = exports.CreateTenantDto = exports.GetCurrentLoginInformationsOutput = exports.TenantLoginInfoDto = exports.UserLoginInfoDto = exports.ApplicationInfoDto = exports.RoleDtoPagedResultDto = exports.GetRoleForEditOutput = exports.FlatPermissionDto = exports.RoleEditDto = exports.PermissionDtoListResultDto = exports.PermissionDto = exports.RoleListDtoListResultDto = exports.RoleListDto = exports.RoleDto = exports.CreateRoleDto = exports.ChangeUiThemeInput = exports.GetForEditBookOutput = exports.BookListDtoPagedResultDto = exports.BookListDto = exports.CreateOrUpdateBookInput = exports.BookEditInput = exports.RegisterOutput = exports.RegisterInput = exports.IsTenantAvailableOutput = exports.TenantAvailabilityState = exports.IsTenantAvailableInput = exports.UserServiceProxy = exports.TokenAuthServiceProxy = exports.TenantRegistrationServiceProxy = exports.TenantServiceProxy = exports.SessionServiceProxy = exports.RoleServiceProxy = exports.ConfigurationServiceProxy = exports.BookServiceProxy = exports.AccountServiceProxy = exports.API_BASE_URL = void 0;
require("rxjs/add/operator/finally");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var moment = require("moment");
exports.API_BASE_URL = new core_1.InjectionToken('API_BASE_URL');
var AccountServiceProxy = /** @class */ (function () {
    function AccountServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.isTenantAvailable = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Account/IsTenantAvailable';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processIsTenantAvailable(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processIsTenantAvailable(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processIsTenantAvailable = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = IsTenantAvailableOutput.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.register = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Account/Register';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processRegister(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRegister(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processRegister = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = RegisterOutput.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    AccountServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL))
    ], AccountServiceProxy);
    return AccountServiceProxy;
}());
exports.AccountServiceProxy = AccountServiceProxy;
var BookServiceProxy = /** @class */ (function () {
    function BookServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    BookServiceProxy.prototype.batchDeleteBook = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Book/BatchDeleteBook';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDeleteBook(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDeleteBook(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BookServiceProxy.prototype.processBatchDeleteBook = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    BookServiceProxy.prototype.createOrUpdateBook = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Book/CreateOrUpdateBook';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdateBook(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdateBook(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BookServiceProxy.prototype.processCreateOrUpdateBook = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    BookServiceProxy.prototype.deleteBook = function (id) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Book/DeleteBook?';
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += 'Id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({})
        };
        return this.http
            .request('delete', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processDeleteBook(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDeleteBook(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BookServiceProxy.prototype.processDeleteBook = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    BookServiceProxy.prototype.getPagedBooks = function (filterText, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Book/GetPagedBooks?';
        if (filterText === null)
            throw new Error("The parameter 'filterText' cannot be null.");
        else if (filterText !== undefined)
            url_ += 'FilterText=' + encodeURIComponent('' + filterText) + '&';
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += 'Sorting=' + encodeURIComponent('' + sorting) + '&';
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += 'MaxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += 'SkipCount=' + encodeURIComponent('' + skipCount) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedBooks(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedBooks(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BookServiceProxy.prototype.processGetPagedBooks = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = BookListDtoPagedResultDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    BookServiceProxy.prototype.getForEditBook = function (id) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Book/GetForEditBook?';
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += 'Id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEditBook(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEditBook(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BookServiceProxy.prototype.processGetForEditBook = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = GetForEditBookOutput.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    BookServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL))
    ], BookServiceProxy);
    return BookServiceProxy;
}());
exports.BookServiceProxy = BookServiceProxy;
var ConfigurationServiceProxy = /** @class */ (function () {
    function ConfigurationServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    ConfigurationServiceProxy.prototype.changeUiTheme = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Configuration/ChangeUiTheme';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processChangeUiTheme(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processChangeUiTheme(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ConfigurationServiceProxy.prototype.processChangeUiTheme = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ConfigurationServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL))
    ], ConfigurationServiceProxy);
    return ConfigurationServiceProxy;
}());
exports.ConfigurationServiceProxy = ConfigurationServiceProxy;
var RoleServiceProxy = /** @class */ (function () {
    function RoleServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.create = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Role/Create';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreate(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processCreate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = RoleDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param permission (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.getRoles = function (permission) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Role/GetRoles?';
        if (permission === null)
            throw new Error("The parameter 'permission' cannot be null.");
        else if (permission !== undefined)
            url_ += 'Permission=' + encodeURIComponent('' + permission) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetRoles(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetRoles(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGetRoles = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = RoleListDtoListResultDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.update = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Role/Update';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('put', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdate(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processUpdate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = RoleDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    RoleServiceProxy.prototype["delete"] = function (id) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Role/Delete?';
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += 'Id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({})
        };
        return this.http
            .request('delete', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    RoleServiceProxy.prototype.getAllPermissions = function () {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Role/GetAllPermissions';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAllPermissions(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAllPermissions(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGetAllPermissions = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = PermissionDtoListResultDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.getRoleForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Role/GetRoleForEdit?';
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += 'Id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetRoleForEdit(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetRoleForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGetRoleForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = GetRoleForEditOutput.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.get = function (id) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Role/Get?';
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += 'Id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGet(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGet(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGet = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = RoleDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param keyword (optional)
     * @param skipCount (optional)
     * @param maxResultCount (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.getAll = function (keyword, skipCount, maxResultCount) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Role/GetAll?';
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += 'Keyword=' + encodeURIComponent('' + keyword) + '&';
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += 'SkipCount=' + encodeURIComponent('' + skipCount) + '&';
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += 'MaxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAll(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAll(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = RoleDtoPagedResultDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    RoleServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL))
    ], RoleServiceProxy);
    return RoleServiceProxy;
}());
exports.RoleServiceProxy = RoleServiceProxy;
var SessionServiceProxy = /** @class */ (function () {
    function SessionServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    SessionServiceProxy.prototype.getCurrentLoginInformations = function () {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Session/GetCurrentLoginInformations';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetCurrentLoginInformations(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetCurrentLoginInformations(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SessionServiceProxy.prototype.processGetCurrentLoginInformations = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = GetCurrentLoginInformationsOutput.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    SessionServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL))
    ], SessionServiceProxy);
    return SessionServiceProxy;
}());
exports.SessionServiceProxy = SessionServiceProxy;
var TenantServiceProxy = /** @class */ (function () {
    function TenantServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.create = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Tenant/Create';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreate(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processCreate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = TenantDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    TenantServiceProxy.prototype["delete"] = function (id) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Tenant/Delete?';
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += 'Id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({})
        };
        return this.http
            .request('delete', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.get = function (id) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Tenant/Get?';
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += 'Id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGet(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGet(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processGet = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = TenantDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param keyword (optional)
     * @param isActive (optional)
     * @param skipCount (optional)
     * @param maxResultCount (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.getAll = function (keyword, isActive, skipCount, maxResultCount) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Tenant/GetAll?';
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += 'Keyword=' + encodeURIComponent('' + keyword) + '&';
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += 'IsActive=' + encodeURIComponent('' + isActive) + '&';
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += 'SkipCount=' + encodeURIComponent('' + skipCount) + '&';
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += 'MaxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAll(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAll(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = TenantDtoPagedResultDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.update = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/Tenant/Update';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('put', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdate(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processUpdate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = TenantDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TenantServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL))
    ], TenantServiceProxy);
    return TenantServiceProxy;
}());
exports.TenantServiceProxy = TenantServiceProxy;
var TenantRegistrationServiceProxy = /** @class */ (function () {
    function TenantRegistrationServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    TenantRegistrationServiceProxy.prototype.registerTenant = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/TenantRegistration/RegisterTenant';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processRegisterTenant(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRegisterTenant(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantRegistrationServiceProxy.prototype.processRegisterTenant = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = TenantDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TenantRegistrationServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL))
    ], TenantRegistrationServiceProxy);
    return TenantRegistrationServiceProxy;
}());
exports.TenantRegistrationServiceProxy = TenantRegistrationServiceProxy;
var TokenAuthServiceProxy = /** @class */ (function () {
    function TokenAuthServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    TokenAuthServiceProxy.prototype.authenticate = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/TokenAuth/Authenticate';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processAuthenticate(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processAuthenticate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processAuthenticate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AuthenticateResultModel.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    TokenAuthServiceProxy.prototype.getExternalAuthenticationProviders = function () {
        var _this = this;
        var url_ = this.baseUrl + '/api/TokenAuth/GetExternalAuthenticationProviders';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetExternalAuthenticationProviders(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetExternalAuthenticationProviders(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processGetExternalAuthenticationProviders = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                        var item = resultData200_1[_i];
                        result200.push(ExternalLoginProviderInfoModel.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    TokenAuthServiceProxy.prototype.externalAuthenticate = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/TokenAuth/ExternalAuthenticate';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processExternalAuthenticate(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processExternalAuthenticate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processExternalAuthenticate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = ExternalAuthenticateResultModel.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TokenAuthServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL))
    ], TokenAuthServiceProxy);
    return TokenAuthServiceProxy;
}());
exports.TokenAuthServiceProxy = TokenAuthServiceProxy;
var UserServiceProxy = /** @class */ (function () {
    function UserServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    UserServiceProxy.prototype.create = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/User/Create';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreate(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processCreate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = UserDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    UserServiceProxy.prototype.update = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/User/Update';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('put', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdate(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processUpdate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = UserDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    UserServiceProxy.prototype["delete"] = function (id) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/User/Delete?';
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += 'Id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({})
        };
        return this.http
            .request('delete', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    UserServiceProxy.prototype.getRoles = function () {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/User/GetRoles';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetRoles(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetRoles(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGetRoles = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = RoleDtoListResultDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    UserServiceProxy.prototype.changeLanguage = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/User/ChangeLanguage';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processChangeLanguage(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processChangeLanguage(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processChangeLanguage = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    UserServiceProxy.prototype.changePassword = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/User/ChangePassword';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processChangePassword(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processChangePassword(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processChangePassword = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param body (optional)
     * @return Success
     */
    UserServiceProxy.prototype.resetPassword = function (body) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/User/ResetPassword';
        url_ = url_.replace(/[?&]$/, '');
        var content_ = JSON.stringify(body);
        var options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('post', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processResetPassword(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processResetPassword(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processResetPassword = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    UserServiceProxy.prototype.get = function (id) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/User/Get?';
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += 'Id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGet(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGet(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGet = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = UserDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param keyword (optional)
     * @param isActive (optional)
     * @param skipCount (optional)
     * @param maxResultCount (optional)
     * @return Success
     */
    UserServiceProxy.prototype.getAll = function (keyword, isActive, skipCount, maxResultCount) {
        var _this = this;
        var url_ = this.baseUrl + '/api/services/app/User/GetAll?';
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += 'Keyword=' + encodeURIComponent('' + keyword) + '&';
        if (isActive === null)
            throw new Error("The parameter 'isActive' cannot be null.");
        else if (isActive !== undefined)
            url_ += 'IsActive=' + encodeURIComponent('' + isActive) + '&';
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += 'SkipCount=' + encodeURIComponent('' + skipCount) + '&';
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += 'MaxResultCount=' + encodeURIComponent('' + maxResultCount) + '&';
        url_ = url_.replace(/[?&]$/, '');
        var options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new http_1.HttpHeaders({
                Accept: 'text/plain'
            })
        };
        return this.http
            .request('get', url_, options_)
            .pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAll(response_);
        }))
            .pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAll(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse
            ? response.body
            : response.error instanceof Blob
                ? response.error
                : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === ''
                    ? null
                    : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = UserDtoPagedResultDto.fromJS(resultData200);
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    UserServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL))
    ], UserServiceProxy);
    return UserServiceProxy;
}());
exports.UserServiceProxy = UserServiceProxy;
var IsTenantAvailableInput = /** @class */ (function () {
    function IsTenantAvailableInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IsTenantAvailableInput.prototype.init = function (_data) {
        if (_data) {
            this.tenancyName = _data['tenancyName'];
        }
    };
    IsTenantAvailableInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    };
    IsTenantAvailableInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['tenancyName'] = this.tenancyName;
        return data;
    };
    IsTenantAvailableInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new IsTenantAvailableInput();
        result.init(json);
        return result;
    };
    return IsTenantAvailableInput;
}());
exports.IsTenantAvailableInput = IsTenantAvailableInput;
var TenantAvailabilityState;
(function (TenantAvailabilityState) {
    TenantAvailabilityState[TenantAvailabilityState["_1"] = 1] = "_1";
    TenantAvailabilityState[TenantAvailabilityState["_2"] = 2] = "_2";
    TenantAvailabilityState[TenantAvailabilityState["_3"] = 3] = "_3";
})(TenantAvailabilityState = exports.TenantAvailabilityState || (exports.TenantAvailabilityState = {}));
var IsTenantAvailableOutput = /** @class */ (function () {
    function IsTenantAvailableOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IsTenantAvailableOutput.prototype.init = function (_data) {
        if (_data) {
            this.state = _data['state'];
            this.tenantId = _data['tenantId'];
        }
    };
    IsTenantAvailableOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    };
    IsTenantAvailableOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['state'] = this.state;
        data['tenantId'] = this.tenantId;
        return data;
    };
    IsTenantAvailableOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new IsTenantAvailableOutput();
        result.init(json);
        return result;
    };
    return IsTenantAvailableOutput;
}());
exports.IsTenantAvailableOutput = IsTenantAvailableOutput;
var RegisterInput = /** @class */ (function () {
    function RegisterInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RegisterInput.prototype.init = function (_data) {
        if (_data) {
            this.name = _data['name'];
            this.surname = _data['surname'];
            this.userName = _data['userName'];
            this.emailAddress = _data['emailAddress'];
            this.password = _data['password'];
            this.captchaResponse = _data['captchaResponse'];
        }
    };
    RegisterInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RegisterInput();
        result.init(data);
        return result;
    };
    RegisterInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['surname'] = this.surname;
        data['userName'] = this.userName;
        data['emailAddress'] = this.emailAddress;
        data['password'] = this.password;
        data['captchaResponse'] = this.captchaResponse;
        return data;
    };
    RegisterInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RegisterInput();
        result.init(json);
        return result;
    };
    return RegisterInput;
}());
exports.RegisterInput = RegisterInput;
var RegisterOutput = /** @class */ (function () {
    function RegisterOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RegisterOutput.prototype.init = function (_data) {
        if (_data) {
            this.canLogin = _data['canLogin'];
        }
    };
    RegisterOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RegisterOutput();
        result.init(data);
        return result;
    };
    RegisterOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['canLogin'] = this.canLogin;
        return data;
    };
    RegisterOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RegisterOutput();
        result.init(json);
        return result;
    };
    return RegisterOutput;
}());
exports.RegisterOutput = RegisterOutput;
var BookEditInput = /** @class */ (function () {
    function BookEditInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BookEditInput.prototype.init = function (_data) {
        if (_data) {
            this.id = _data['id'];
            this.name = _data['name'];
            this.author = _data['author'];
            this.priceUrl = _data['priceUrl'];
            this.imgUrl = _data['imgUrl'];
            this.intro = _data['intro'];
        }
    };
    BookEditInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BookEditInput();
        result.init(data);
        return result;
    };
    BookEditInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['name'] = this.name;
        data['author'] = this.author;
        data['priceUrl'] = this.priceUrl;
        data['imgUrl'] = this.imgUrl;
        data['intro'] = this.intro;
        return data;
    };
    BookEditInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BookEditInput();
        result.init(json);
        return result;
    };
    return BookEditInput;
}());
exports.BookEditInput = BookEditInput;
var CreateOrUpdateBookInput = /** @class */ (function () {
    function CreateOrUpdateBookInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.book = new BookEditInput();
        }
    }
    CreateOrUpdateBookInput.prototype.init = function (_data) {
        if (_data) {
            this.book = _data['book']
                ? BookEditInput.fromJS(_data['book'])
                : new BookEditInput();
        }
    };
    CreateOrUpdateBookInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateBookInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateBookInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['book'] = this.book ? this.book.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateBookInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateBookInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateBookInput;
}());
exports.CreateOrUpdateBookInput = CreateOrUpdateBookInput;
var BookListDto = /** @class */ (function () {
    function BookListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BookListDto.prototype.init = function (_data) {
        if (_data) {
            this.name = _data['name'];
            this.author = _data['author'];
            this.imgUrl = _data['imgUrl'];
            this.intro = _data['intro'];
            this.id = _data['id'];
        }
    };
    BookListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BookListDto();
        result.init(data);
        return result;
    };
    BookListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['author'] = this.author;
        data['imgUrl'] = this.imgUrl;
        data['intro'] = this.intro;
        data['id'] = this.id;
        return data;
    };
    BookListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BookListDto();
        result.init(json);
        return result;
    };
    return BookListDto;
}());
exports.BookListDto = BookListDto;
var BookListDtoPagedResultDto = /** @class */ (function () {
    function BookListDtoPagedResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BookListDtoPagedResultDto.prototype.init = function (_data) {
        if (_data) {
            this.totalCount = _data['totalCount'];
            if (Array.isArray(_data['items'])) {
                this.items = [];
                for (var _i = 0, _a = _data['items']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(BookListDto.fromJS(item));
                }
            }
        }
    };
    BookListDtoPagedResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BookListDtoPagedResultDto();
        result.init(data);
        return result;
    };
    BookListDtoPagedResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data['items'].push(item.toJSON());
            }
        }
        return data;
    };
    BookListDtoPagedResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BookListDtoPagedResultDto();
        result.init(json);
        return result;
    };
    return BookListDtoPagedResultDto;
}());
exports.BookListDtoPagedResultDto = BookListDtoPagedResultDto;
var GetForEditBookOutput = /** @class */ (function () {
    function GetForEditBookOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetForEditBookOutput.prototype.init = function (_data) {
        if (_data) {
            this.book = _data['book']
                ? BookEditInput.fromJS(_data['book'])
                : undefined;
        }
    };
    GetForEditBookOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetForEditBookOutput();
        result.init(data);
        return result;
    };
    GetForEditBookOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['book'] = this.book ? this.book.toJSON() : undefined;
        return data;
    };
    GetForEditBookOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetForEditBookOutput();
        result.init(json);
        return result;
    };
    return GetForEditBookOutput;
}());
exports.GetForEditBookOutput = GetForEditBookOutput;
var ChangeUiThemeInput = /** @class */ (function () {
    function ChangeUiThemeInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ChangeUiThemeInput.prototype.init = function (_data) {
        if (_data) {
            this.theme = _data['theme'];
        }
    };
    ChangeUiThemeInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ChangeUiThemeInput();
        result.init(data);
        return result;
    };
    ChangeUiThemeInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['theme'] = this.theme;
        return data;
    };
    ChangeUiThemeInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ChangeUiThemeInput();
        result.init(json);
        return result;
    };
    return ChangeUiThemeInput;
}());
exports.ChangeUiThemeInput = ChangeUiThemeInput;
var CreateRoleDto = /** @class */ (function () {
    function CreateRoleDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateRoleDto.prototype.init = function (_data) {
        if (_data) {
            this.name = _data['name'];
            this.displayName = _data['displayName'];
            this.normalizedName = _data['normalizedName'];
            this.description = _data['description'];
            if (Array.isArray(_data['permissions'])) {
                this.permissions = [];
                for (var _i = 0, _a = _data['permissions']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.permissions.push(item);
                }
            }
        }
    };
    CreateRoleDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateRoleDto();
        result.init(data);
        return result;
    };
    CreateRoleDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['displayName'] = this.displayName;
        data['normalizedName'] = this.normalizedName;
        data['description'] = this.description;
        if (Array.isArray(this.permissions)) {
            data['permissions'] = [];
            for (var _i = 0, _a = this.permissions; _i < _a.length; _i++) {
                var item = _a[_i];
                data['permissions'].push(item);
            }
        }
        return data;
    };
    CreateRoleDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateRoleDto();
        result.init(json);
        return result;
    };
    return CreateRoleDto;
}());
exports.CreateRoleDto = CreateRoleDto;
var RoleDto = /** @class */ (function () {
    function RoleDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RoleDto.prototype.init = function (_data) {
        if (_data) {
            this.name = _data['name'];
            this.displayName = _data['displayName'];
            this.normalizedName = _data['normalizedName'];
            this.description = _data['description'];
            this.isStatic = _data['isStatic'];
            if (Array.isArray(_data['permissions'])) {
                this.permissions = [];
                for (var _i = 0, _a = _data['permissions']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.permissions.push(item);
                }
            }
            this.id = _data['id'];
        }
    };
    RoleDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RoleDto();
        result.init(data);
        return result;
    };
    RoleDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['displayName'] = this.displayName;
        data['normalizedName'] = this.normalizedName;
        data['description'] = this.description;
        data['isStatic'] = this.isStatic;
        if (Array.isArray(this.permissions)) {
            data['permissions'] = [];
            for (var _i = 0, _a = this.permissions; _i < _a.length; _i++) {
                var item = _a[_i];
                data['permissions'].push(item);
            }
        }
        data['id'] = this.id;
        return data;
    };
    RoleDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RoleDto();
        result.init(json);
        return result;
    };
    return RoleDto;
}());
exports.RoleDto = RoleDto;
var RoleListDto = /** @class */ (function () {
    function RoleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RoleListDto.prototype.init = function (_data) {
        if (_data) {
            this.name = _data['name'];
            this.displayName = _data['displayName'];
            this.isStatic = _data['isStatic'];
            this.isDefault = _data['isDefault'];
            this.creationTime = _data['creationTime']
                ? moment(_data['creationTime'].toString())
                : undefined;
            this.id = _data['id'];
        }
    };
    RoleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RoleListDto();
        result.init(data);
        return result;
    };
    RoleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['displayName'] = this.displayName;
        data['isStatic'] = this.isStatic;
        data['isDefault'] = this.isDefault;
        data['creationTime'] = this.creationTime
            ? this.creationTime.toISOString()
            : undefined;
        data['id'] = this.id;
        return data;
    };
    RoleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RoleListDto();
        result.init(json);
        return result;
    };
    return RoleListDto;
}());
exports.RoleListDto = RoleListDto;
var RoleListDtoListResultDto = /** @class */ (function () {
    function RoleListDtoListResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RoleListDtoListResultDto.prototype.init = function (_data) {
        if (_data) {
            if (Array.isArray(_data['items'])) {
                this.items = [];
                for (var _i = 0, _a = _data['items']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(RoleListDto.fromJS(item));
                }
            }
        }
    };
    RoleListDtoListResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RoleListDtoListResultDto();
        result.init(data);
        return result;
    };
    RoleListDtoListResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data['items'].push(item.toJSON());
            }
        }
        return data;
    };
    RoleListDtoListResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RoleListDtoListResultDto();
        result.init(json);
        return result;
    };
    return RoleListDtoListResultDto;
}());
exports.RoleListDtoListResultDto = RoleListDtoListResultDto;
var PermissionDto = /** @class */ (function () {
    function PermissionDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PermissionDto.prototype.init = function (_data) {
        if (_data) {
            this.name = _data['name'];
            this.displayName = _data['displayName'];
            this.description = _data['description'];
            this.id = _data['id'];
        }
    };
    PermissionDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PermissionDto();
        result.init(data);
        return result;
    };
    PermissionDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['displayName'] = this.displayName;
        data['description'] = this.description;
        data['id'] = this.id;
        return data;
    };
    PermissionDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PermissionDto();
        result.init(json);
        return result;
    };
    return PermissionDto;
}());
exports.PermissionDto = PermissionDto;
var PermissionDtoListResultDto = /** @class */ (function () {
    function PermissionDtoListResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PermissionDtoListResultDto.prototype.init = function (_data) {
        if (_data) {
            if (Array.isArray(_data['items'])) {
                this.items = [];
                for (var _i = 0, _a = _data['items']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(PermissionDto.fromJS(item));
                }
            }
        }
    };
    PermissionDtoListResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PermissionDtoListResultDto();
        result.init(data);
        return result;
    };
    PermissionDtoListResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data['items'].push(item.toJSON());
            }
        }
        return data;
    };
    PermissionDtoListResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PermissionDtoListResultDto();
        result.init(json);
        return result;
    };
    return PermissionDtoListResultDto;
}());
exports.PermissionDtoListResultDto = PermissionDtoListResultDto;
var RoleEditDto = /** @class */ (function () {
    function RoleEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RoleEditDto.prototype.init = function (_data) {
        if (_data) {
            this.name = _data['name'];
            this.displayName = _data['displayName'];
            this.description = _data['description'];
            this.isStatic = _data['isStatic'];
            this.id = _data['id'];
        }
    };
    RoleEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RoleEditDto();
        result.init(data);
        return result;
    };
    RoleEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['displayName'] = this.displayName;
        data['description'] = this.description;
        data['isStatic'] = this.isStatic;
        data['id'] = this.id;
        return data;
    };
    RoleEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RoleEditDto();
        result.init(json);
        return result;
    };
    return RoleEditDto;
}());
exports.RoleEditDto = RoleEditDto;
var FlatPermissionDto = /** @class */ (function () {
    function FlatPermissionDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FlatPermissionDto.prototype.init = function (_data) {
        if (_data) {
            this.name = _data['name'];
            this.displayName = _data['displayName'];
            this.description = _data['description'];
        }
    };
    FlatPermissionDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FlatPermissionDto();
        result.init(data);
        return result;
    };
    FlatPermissionDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['displayName'] = this.displayName;
        data['description'] = this.description;
        return data;
    };
    FlatPermissionDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new FlatPermissionDto();
        result.init(json);
        return result;
    };
    return FlatPermissionDto;
}());
exports.FlatPermissionDto = FlatPermissionDto;
var GetRoleForEditOutput = /** @class */ (function () {
    function GetRoleForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetRoleForEditOutput.prototype.init = function (_data) {
        if (_data) {
            this.role = _data['role']
                ? RoleEditDto.fromJS(_data['role'])
                : undefined;
            if (Array.isArray(_data['permissions'])) {
                this.permissions = [];
                for (var _i = 0, _a = _data['permissions']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.permissions.push(FlatPermissionDto.fromJS(item));
                }
            }
            if (Array.isArray(_data['grantedPermissionNames'])) {
                this.grantedPermissionNames = [];
                for (var _b = 0, _c = _data['grantedPermissionNames']; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    };
    GetRoleForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    };
    GetRoleForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['role'] = this.role ? this.role.toJSON() : undefined;
        if (Array.isArray(this.permissions)) {
            data['permissions'] = [];
            for (var _i = 0, _a = this.permissions; _i < _a.length; _i++) {
                var item = _a[_i];
                data['permissions'].push(item.toJSON());
            }
        }
        if (Array.isArray(this.grantedPermissionNames)) {
            data['grantedPermissionNames'] = [];
            for (var _b = 0, _c = this.grantedPermissionNames; _b < _c.length; _b++) {
                var item = _c[_b];
                data['grantedPermissionNames'].push(item);
            }
        }
        return data;
    };
    GetRoleForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetRoleForEditOutput();
        result.init(json);
        return result;
    };
    return GetRoleForEditOutput;
}());
exports.GetRoleForEditOutput = GetRoleForEditOutput;
var RoleDtoPagedResultDto = /** @class */ (function () {
    function RoleDtoPagedResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RoleDtoPagedResultDto.prototype.init = function (_data) {
        if (_data) {
            this.totalCount = _data['totalCount'];
            if (Array.isArray(_data['items'])) {
                this.items = [];
                for (var _i = 0, _a = _data['items']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(RoleDto.fromJS(item));
                }
            }
        }
    };
    RoleDtoPagedResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RoleDtoPagedResultDto();
        result.init(data);
        return result;
    };
    RoleDtoPagedResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data['items'].push(item.toJSON());
            }
        }
        return data;
    };
    RoleDtoPagedResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RoleDtoPagedResultDto();
        result.init(json);
        return result;
    };
    return RoleDtoPagedResultDto;
}());
exports.RoleDtoPagedResultDto = RoleDtoPagedResultDto;
var ApplicationInfoDto = /** @class */ (function () {
    function ApplicationInfoDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ApplicationInfoDto.prototype.init = function (_data) {
        if (_data) {
            this.version = _data['version'];
            this.releaseDate = _data['releaseDate']
                ? moment(_data['releaseDate'].toString())
                : undefined;
            if (_data['features']) {
                this.features = {};
                for (var key in _data['features']) {
                    if (_data['features'].hasOwnProperty(key))
                        this.features[key] = _data['features'][key];
                }
            }
        }
    };
    ApplicationInfoDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ApplicationInfoDto();
        result.init(data);
        return result;
    };
    ApplicationInfoDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['version'] = this.version;
        data['releaseDate'] = this.releaseDate
            ? this.releaseDate.toISOString()
            : undefined;
        if (this.features) {
            data['features'] = {};
            for (var key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data['features'][key] = this.features[key];
            }
        }
        return data;
    };
    ApplicationInfoDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ApplicationInfoDto();
        result.init(json);
        return result;
    };
    return ApplicationInfoDto;
}());
exports.ApplicationInfoDto = ApplicationInfoDto;
var UserLoginInfoDto = /** @class */ (function () {
    function UserLoginInfoDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserLoginInfoDto.prototype.init = function (_data) {
        if (_data) {
            this.name = _data['name'];
            this.surname = _data['surname'];
            this.userName = _data['userName'];
            this.emailAddress = _data['emailAddress'];
            this.id = _data['id'];
        }
    };
    UserLoginInfoDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserLoginInfoDto();
        result.init(data);
        return result;
    };
    UserLoginInfoDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['surname'] = this.surname;
        data['userName'] = this.userName;
        data['emailAddress'] = this.emailAddress;
        data['id'] = this.id;
        return data;
    };
    UserLoginInfoDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserLoginInfoDto();
        result.init(json);
        return result;
    };
    return UserLoginInfoDto;
}());
exports.UserLoginInfoDto = UserLoginInfoDto;
var TenantLoginInfoDto = /** @class */ (function () {
    function TenantLoginInfoDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantLoginInfoDto.prototype.init = function (_data) {
        if (_data) {
            this.tenancyName = _data['tenancyName'];
            this.name = _data['name'];
            this.id = _data['id'];
        }
    };
    TenantLoginInfoDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    };
    TenantLoginInfoDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['tenancyName'] = this.tenancyName;
        data['name'] = this.name;
        data['id'] = this.id;
        return data;
    };
    TenantLoginInfoDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantLoginInfoDto();
        result.init(json);
        return result;
    };
    return TenantLoginInfoDto;
}());
exports.TenantLoginInfoDto = TenantLoginInfoDto;
var GetCurrentLoginInformationsOutput = /** @class */ (function () {
    function GetCurrentLoginInformationsOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetCurrentLoginInformationsOutput.prototype.init = function (_data) {
        if (_data) {
            this.application = _data['application']
                ? ApplicationInfoDto.fromJS(_data['application'])
                : undefined;
            this.user = _data['user']
                ? UserLoginInfoDto.fromJS(_data['user'])
                : undefined;
            this.tenant = _data['tenant']
                ? TenantLoginInfoDto.fromJS(_data['tenant'])
                : undefined;
        }
    };
    GetCurrentLoginInformationsOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    };
    GetCurrentLoginInformationsOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['application'] = this.application
            ? this.application.toJSON()
            : undefined;
        data['user'] = this.user ? this.user.toJSON() : undefined;
        data['tenant'] = this.tenant ? this.tenant.toJSON() : undefined;
        return data;
    };
    GetCurrentLoginInformationsOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetCurrentLoginInformationsOutput();
        result.init(json);
        return result;
    };
    return GetCurrentLoginInformationsOutput;
}());
exports.GetCurrentLoginInformationsOutput = GetCurrentLoginInformationsOutput;
var CreateTenantDto = /** @class */ (function () {
    function CreateTenantDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateTenantDto.prototype.init = function (_data) {
        if (_data) {
            this.tenancyName = _data['tenancyName'];
            this.name = _data['name'];
            this.adminEmailAddress = _data['adminEmailAddress'];
            this.connectionString = _data['connectionString'];
            this.isActive = _data['isActive'];
            this.adminPassword = _data['adminPassword'];
        }
    };
    CreateTenantDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateTenantDto();
        result.init(data);
        return result;
    };
    CreateTenantDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['tenancyName'] = this.tenancyName;
        data['name'] = this.name;
        data['adminEmailAddress'] = this.adminEmailAddress;
        data['connectionString'] = this.connectionString;
        data['isActive'] = this.isActive;
        data['adminPassword'] = this.adminPassword;
        return data;
    };
    CreateTenantDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateTenantDto();
        result.init(json);
        return result;
    };
    return CreateTenantDto;
}());
exports.CreateTenantDto = CreateTenantDto;
var TenantDto = /** @class */ (function () {
    function TenantDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantDto.prototype.init = function (_data) {
        if (_data) {
            this.tenancyName = _data['tenancyName'];
            this.name = _data['name'];
            this.isActive = _data['isActive'];
            this.id = _data['id'];
        }
    };
    TenantDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantDto();
        result.init(data);
        return result;
    };
    TenantDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['tenancyName'] = this.tenancyName;
        data['name'] = this.name;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    };
    TenantDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantDto();
        result.init(json);
        return result;
    };
    return TenantDto;
}());
exports.TenantDto = TenantDto;
var TenantDtoPagedResultDto = /** @class */ (function () {
    function TenantDtoPagedResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantDtoPagedResultDto.prototype.init = function (_data) {
        if (_data) {
            this.totalCount = _data['totalCount'];
            if (Array.isArray(_data['items'])) {
                this.items = [];
                for (var _i = 0, _a = _data['items']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TenantDto.fromJS(item));
                }
            }
        }
    };
    TenantDtoPagedResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantDtoPagedResultDto();
        result.init(data);
        return result;
    };
    TenantDtoPagedResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data['items'].push(item.toJSON());
            }
        }
        return data;
    };
    TenantDtoPagedResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantDtoPagedResultDto();
        result.init(json);
        return result;
    };
    return TenantDtoPagedResultDto;
}());
exports.TenantDtoPagedResultDto = TenantDtoPagedResultDto;
var AuthenticateModel = /** @class */ (function () {
    function AuthenticateModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AuthenticateModel.prototype.init = function (_data) {
        if (_data) {
            this.userNameOrEmailAddress = _data['userNameOrEmailAddress'];
            this.password = _data['password'];
            this.rememberClient = _data['rememberClient'];
        }
    };
    AuthenticateModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AuthenticateModel();
        result.init(data);
        return result;
    };
    AuthenticateModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['userNameOrEmailAddress'] = this.userNameOrEmailAddress;
        data['password'] = this.password;
        data['rememberClient'] = this.rememberClient;
        return data;
    };
    AuthenticateModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AuthenticateModel();
        result.init(json);
        return result;
    };
    return AuthenticateModel;
}());
exports.AuthenticateModel = AuthenticateModel;
var AuthenticateResultModel = /** @class */ (function () {
    function AuthenticateResultModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AuthenticateResultModel.prototype.init = function (_data) {
        if (_data) {
            this.accessToken = _data['accessToken'];
            this.encryptedAccessToken = _data['encryptedAccessToken'];
            this.expireInSeconds = _data['expireInSeconds'];
            this.userId = _data['userId'];
        }
    };
    AuthenticateResultModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AuthenticateResultModel();
        result.init(data);
        return result;
    };
    AuthenticateResultModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['accessToken'] = this.accessToken;
        data['encryptedAccessToken'] = this.encryptedAccessToken;
        data['expireInSeconds'] = this.expireInSeconds;
        data['userId'] = this.userId;
        return data;
    };
    AuthenticateResultModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AuthenticateResultModel();
        result.init(json);
        return result;
    };
    return AuthenticateResultModel;
}());
exports.AuthenticateResultModel = AuthenticateResultModel;
var ExternalLoginProviderInfoModel = /** @class */ (function () {
    function ExternalLoginProviderInfoModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ExternalLoginProviderInfoModel.prototype.init = function (_data) {
        if (_data) {
            this.name = _data['name'];
            this.clientId = _data['clientId'];
        }
    };
    ExternalLoginProviderInfoModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    };
    ExternalLoginProviderInfoModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['clientId'] = this.clientId;
        return data;
    };
    ExternalLoginProviderInfoModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ExternalLoginProviderInfoModel();
        result.init(json);
        return result;
    };
    return ExternalLoginProviderInfoModel;
}());
exports.ExternalLoginProviderInfoModel = ExternalLoginProviderInfoModel;
var ExternalAuthenticateModel = /** @class */ (function () {
    function ExternalAuthenticateModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ExternalAuthenticateModel.prototype.init = function (_data) {
        if (_data) {
            this.authProvider = _data['authProvider'];
            this.providerKey = _data['providerKey'];
            this.providerAccessCode = _data['providerAccessCode'];
        }
    };
    ExternalAuthenticateModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    };
    ExternalAuthenticateModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['authProvider'] = this.authProvider;
        data['providerKey'] = this.providerKey;
        data['providerAccessCode'] = this.providerAccessCode;
        return data;
    };
    ExternalAuthenticateModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ExternalAuthenticateModel();
        result.init(json);
        return result;
    };
    return ExternalAuthenticateModel;
}());
exports.ExternalAuthenticateModel = ExternalAuthenticateModel;
var ExternalAuthenticateResultModel = /** @class */ (function () {
    function ExternalAuthenticateResultModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ExternalAuthenticateResultModel.prototype.init = function (_data) {
        if (_data) {
            this.accessToken = _data['accessToken'];
            this.encryptedAccessToken = _data['encryptedAccessToken'];
            this.expireInSeconds = _data['expireInSeconds'];
            this.waitingForActivation = _data['waitingForActivation'];
        }
    };
    ExternalAuthenticateResultModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    };
    ExternalAuthenticateResultModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['accessToken'] = this.accessToken;
        data['encryptedAccessToken'] = this.encryptedAccessToken;
        data['expireInSeconds'] = this.expireInSeconds;
        data['waitingForActivation'] = this.waitingForActivation;
        return data;
    };
    ExternalAuthenticateResultModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ExternalAuthenticateResultModel();
        result.init(json);
        return result;
    };
    return ExternalAuthenticateResultModel;
}());
exports.ExternalAuthenticateResultModel = ExternalAuthenticateResultModel;
var CreateUserDto = /** @class */ (function () {
    function CreateUserDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateUserDto.prototype.init = function (_data) {
        if (_data) {
            this.userName = _data['userName'];
            this.name = _data['name'];
            this.surname = _data['surname'];
            this.emailAddress = _data['emailAddress'];
            this.isActive = _data['isActive'];
            if (Array.isArray(_data['roleNames'])) {
                this.roleNames = [];
                for (var _i = 0, _a = _data['roleNames']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.roleNames.push(item);
                }
            }
            this.password = _data['password'];
        }
    };
    CreateUserDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateUserDto();
        result.init(data);
        return result;
    };
    CreateUserDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['userName'] = this.userName;
        data['name'] = this.name;
        data['surname'] = this.surname;
        data['emailAddress'] = this.emailAddress;
        data['isActive'] = this.isActive;
        if (Array.isArray(this.roleNames)) {
            data['roleNames'] = [];
            for (var _i = 0, _a = this.roleNames; _i < _a.length; _i++) {
                var item = _a[_i];
                data['roleNames'].push(item);
            }
        }
        data['password'] = this.password;
        return data;
    };
    CreateUserDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateUserDto();
        result.init(json);
        return result;
    };
    return CreateUserDto;
}());
exports.CreateUserDto = CreateUserDto;
var UserDto = /** @class */ (function () {
    function UserDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserDto.prototype.init = function (_data) {
        if (_data) {
            this.userName = _data['userName'];
            this.name = _data['name'];
            this.surname = _data['surname'];
            this.emailAddress = _data['emailAddress'];
            this.isActive = _data['isActive'];
            this.fullName = _data['fullName'];
            this.lastLoginTime = _data['lastLoginTime']
                ? moment(_data['lastLoginTime'].toString())
                : undefined;
            this.creationTime = _data['creationTime']
                ? moment(_data['creationTime'].toString())
                : undefined;
            if (Array.isArray(_data['roleNames'])) {
                this.roleNames = [];
                for (var _i = 0, _a = _data['roleNames']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.roleNames.push(item);
                }
            }
            this.id = _data['id'];
        }
    };
    UserDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserDto();
        result.init(data);
        return result;
    };
    UserDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['userName'] = this.userName;
        data['name'] = this.name;
        data['surname'] = this.surname;
        data['emailAddress'] = this.emailAddress;
        data['isActive'] = this.isActive;
        data['fullName'] = this.fullName;
        data['lastLoginTime'] = this.lastLoginTime
            ? this.lastLoginTime.toISOString()
            : undefined;
        data['creationTime'] = this.creationTime
            ? this.creationTime.toISOString()
            : undefined;
        if (Array.isArray(this.roleNames)) {
            data['roleNames'] = [];
            for (var _i = 0, _a = this.roleNames; _i < _a.length; _i++) {
                var item = _a[_i];
                data['roleNames'].push(item);
            }
        }
        data['id'] = this.id;
        return data;
    };
    UserDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserDto();
        result.init(json);
        return result;
    };
    return UserDto;
}());
exports.UserDto = UserDto;
var RoleDtoListResultDto = /** @class */ (function () {
    function RoleDtoListResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RoleDtoListResultDto.prototype.init = function (_data) {
        if (_data) {
            if (Array.isArray(_data['items'])) {
                this.items = [];
                for (var _i = 0, _a = _data['items']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(RoleDto.fromJS(item));
                }
            }
        }
    };
    RoleDtoListResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RoleDtoListResultDto();
        result.init(data);
        return result;
    };
    RoleDtoListResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data['items'].push(item.toJSON());
            }
        }
        return data;
    };
    RoleDtoListResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RoleDtoListResultDto();
        result.init(json);
        return result;
    };
    return RoleDtoListResultDto;
}());
exports.RoleDtoListResultDto = RoleDtoListResultDto;
var ChangeUserLanguageDto = /** @class */ (function () {
    function ChangeUserLanguageDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ChangeUserLanguageDto.prototype.init = function (_data) {
        if (_data) {
            this.languageName = _data['languageName'];
        }
    };
    ChangeUserLanguageDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ChangeUserLanguageDto();
        result.init(data);
        return result;
    };
    ChangeUserLanguageDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['languageName'] = this.languageName;
        return data;
    };
    ChangeUserLanguageDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ChangeUserLanguageDto();
        result.init(json);
        return result;
    };
    return ChangeUserLanguageDto;
}());
exports.ChangeUserLanguageDto = ChangeUserLanguageDto;
var ChangePasswordDto = /** @class */ (function () {
    function ChangePasswordDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ChangePasswordDto.prototype.init = function (_data) {
        if (_data) {
            this.currentPassword = _data['currentPassword'];
            this.newPassword = _data['newPassword'];
        }
    };
    ChangePasswordDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ChangePasswordDto();
        result.init(data);
        return result;
    };
    ChangePasswordDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['currentPassword'] = this.currentPassword;
        data['newPassword'] = this.newPassword;
        return data;
    };
    ChangePasswordDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ChangePasswordDto();
        result.init(json);
        return result;
    };
    return ChangePasswordDto;
}());
exports.ChangePasswordDto = ChangePasswordDto;
var ResetPasswordDto = /** @class */ (function () {
    function ResetPasswordDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ResetPasswordDto.prototype.init = function (_data) {
        if (_data) {
            this.adminPassword = _data['adminPassword'];
            this.userId = _data['userId'];
            this.newPassword = _data['newPassword'];
        }
    };
    ResetPasswordDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ResetPasswordDto();
        result.init(data);
        return result;
    };
    ResetPasswordDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['adminPassword'] = this.adminPassword;
        data['userId'] = this.userId;
        data['newPassword'] = this.newPassword;
        return data;
    };
    ResetPasswordDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ResetPasswordDto();
        result.init(json);
        return result;
    };
    return ResetPasswordDto;
}());
exports.ResetPasswordDto = ResetPasswordDto;
var UserDtoPagedResultDto = /** @class */ (function () {
    function UserDtoPagedResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserDtoPagedResultDto.prototype.init = function (_data) {
        if (_data) {
            this.totalCount = _data['totalCount'];
            if (Array.isArray(_data['items'])) {
                this.items = [];
                for (var _i = 0, _a = _data['items']; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(UserDto.fromJS(item));
                }
            }
        }
    };
    UserDtoPagedResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserDtoPagedResultDto();
        result.init(data);
        return result;
    };
    UserDtoPagedResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data['items'].push(item.toJSON());
            }
        }
        return data;
    };
    UserDtoPagedResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserDtoPagedResultDto();
        result.init(json);
        return result;
    };
    return UserDtoPagedResultDto;
}());
exports.UserDtoPagedResultDto = UserDtoPagedResultDto;
var ApiException = /** @class */ (function (_super) {
    __extends(ApiException, _super);
    function ApiException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isApiException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    ApiException.isApiException = function (obj) {
        return obj.isApiException === true;
    };
    return ApiException;
}(Error));
exports.ApiException = ApiException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        return rxjs_1.throwError(result);
    else
        return rxjs_1.throwError(new ApiException(message, status, response, headers, null));
}
function blobToText(blob) {
    return new rxjs_1.Observable(function (observer) {
        if (!blob) {
            observer.next('');
            observer.complete();
        }
        else {
            var reader = new FileReader();
            reader.onload = function (event) {
                observer.next(event.target.result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
